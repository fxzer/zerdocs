import{_ as s,o as n,c as a,Q as o}from"./chunks/framework.b1bd5a19.js";const B=JSON.parse('{"title":"Typescript 配置文件（tsconfig.json）解析","description":"","frontmatter":{},"headers":[],"relativePath":"FrontEnd/TypeScript/配置文件详解.md","filePath":"FrontEnd/TypeScript/配置文件详解.md"}'),l={name:"FrontEnd/TypeScript/配置文件详解.md"},p=o(`<h1 id="typescript-配置文件-tsconfig-json-解析" tabindex="-1">Typescript 配置文件（tsconfig.json）解析 <a class="header-anchor" href="#typescript-配置文件-tsconfig-json-解析" aria-label="Permalink to &quot;Typescript 配置文件（tsconfig.json）解析&quot;">​</a></h1><p>TypeScript带来的类型系统以及强大的IDE支持，让前端开发也变得严谨而流畅。但TypeScript不是原生的Javascript代码，需要进行编译才能转换为Javascript代码。</p><p>tsconfig.json是编译TypeScript的配置文件，对书写TypeScript代码十分重要。因为有些选项如果你没配置，则需要严格按照TypeScript的规则来书写，对初期使用TypeScript的同学而言，稍不留神就会书写出不符合规则的代码，从而导致编译报错，打击自信心。其实早期可以通过关闭一些规则设置，从而更愉快的从js转为ts开发。笔者根据项目实战经历来解释一些常用的编译选项，文末也会附上笔者整理的所有tsconfig.json选项的解释。</p><h2 id="_1-experimentaldecorators" tabindex="-1">1. experimentalDecorators <a class="header-anchor" href="#_1-experimentaldecorators" aria-label="Permalink to &quot;1. experimentalDecorators&quot;">​</a></h2><p><code>是否启用实验性的ES装饰器</code>。boolean类型，默认值：false。<a href="https://www.typescriptlang.org/docs/handbook/decorators.html" target="_blank" rel="noreferrer">官方解释(opens new window)</a></p><p>TypeScript和ES6中引入了Class的概念，同时在<a href="https://github.com/tc39/proposal-decorators" target="_blank" rel="noreferrer">stage 2 proposal (opens new window)</a>提出了Java等服务器端语言早就有的装饰器模式。通过引入装饰器模式，能极大简化书写代码，把一些通用逻辑封装到装饰器中。很多库都有用到该特性，比如vue-class-component 及 vuex-class等库。<strong>当你使用这些库时，必须开启experimentalDecorators</strong>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">function</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">f</span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">f(): evaluated</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#4D9375;">return</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">function</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#BD976A;">target</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">propertyKey</span><span style="color:#666666;">: </span><span style="color:#5DA994;">string</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">descriptor</span><span style="color:#666666;">: </span><span style="color:#5DA994;">PropertyDescriptor</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">        </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">f(): called</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#666666;">}</span></span>
<span class="line"><span style="color:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">class</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">C</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#666666;">@</span><span style="color:#80A665;">f</span><span style="color:#666666;">()</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#80A665;">method</span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{}</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">f</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">f(): evaluated</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">propertyKey</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">descriptor</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">PropertyDescriptor</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">f(): called</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">class</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">C</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">@</span><span style="color:#59873A;">f</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">method</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><blockquote><p>启用 vuex-class同时需要设置<code>strictFunctionTypes</code>选项为false</p></blockquote><h2 id="_2-strictpropertyinitialization" tabindex="-1">2. strictPropertyInitialization <a class="header-anchor" href="#_2-strictpropertyinitialization" aria-label="Permalink to &quot;2. strictPropertyInitialization&quot;">​</a></h2><p><code>是否类的非undefined属性已经在构造函数里初始化</code>。 boolean类型，默认值：false</p><p>直白点，就是所有的属性值，都需要赋有初始值。<strong>建议把strictPropertyInitialization设置为false</strong>，这样就不需要定义一个变量就必须赋有初始值。对使用vuex-class库的同学，建议请把这个值设为false，绝对能省很多事。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">default</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">class</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">Home</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">extend</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">Vue</span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#BD976A;">jobId</span><span style="color:#666666;">: </span><span style="color:#5DA994;">string</span><span style="color:#666666;"> </span><span style="color:#758575DD;">// 如果开启strictPropertyInitialization，则这里会报错，因为没有赋值默认值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#80A665;">method1</span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">:</span><span style="color:#5DA994;">void</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">        </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#C99076;">this</span><span style="color:#666666;">.</span><span style="color:#BD976A;">jobId</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#666666;">}</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">class</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Home</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">extend</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Vue</span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">jobId</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;"> </span><span style="color:#A0ADA0;">// 如果开启strictPropertyInitialization，则这里会报错，因为没有赋值默认值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">method1</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">:</span><span style="color:#2E8F82;">void</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">jobId</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><blockquote><p>如果设置该选项为true，需要同时启用--strictNullChecks或启用--strict</p></blockquote><h2 id="_3-noimplicitany" tabindex="-1">3. noImplicitAny <a class="header-anchor" href="#_3-noimplicitany" aria-label="Permalink to &quot;3. noImplicitAny&quot;">​</a></h2><p><code>有隐含的 any类型时是否报错</code>。boolean值，默认值：false</p><p>ts是有默认推导的，同时还有any类型，所以不是每个变量或参数定义需要明确告知类型是什么。如果开启该值，当有隐含any类型时，会报错。<strong>建议初次上手TypeScript，把该选项设置为false。</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;">// 当开启noImplicitAny时，需要隐含当any需要明确指出</span></span>
<span class="line"><span style="color:#BD976A;">arr</span><span style="color:#666666;">.</span><span style="color:#80A665;">find</span><span style="color:#666666;">(</span><span style="color:#BD976A;">item</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">item</span><span style="color:#666666;">.</span><span style="color:#BD976A;">name</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">name</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// error</span></span>
<span class="line"><span style="color:#BD976A;">arr</span><span style="color:#666666;">.</span><span style="color:#80A665;">find</span><span style="color:#666666;">((</span><span style="color:#BD976A;">item</span><span style="color:#666666;">: </span><span style="color:#5DA994;">any</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">item</span><span style="color:#666666;">.</span><span style="color:#BD976A;">name</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">name</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// ok</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// 当开启noImplicitAny时，需要隐含当any需要明确指出</span></span>
<span class="line"><span style="color:#B07D48;">arr</span><span style="color:#999999;">.</span><span style="color:#59873A;">find</span><span style="color:#999999;">(</span><span style="color:#B07D48;">item</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">item</span><span style="color:#999999;">.</span><span style="color:#B07D48;">name</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">name</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// error</span></span>
<span class="line"><span style="color:#B07D48;">arr</span><span style="color:#999999;">.</span><span style="color:#59873A;">find</span><span style="color:#999999;">((</span><span style="color:#B07D48;">item</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">any</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">item</span><span style="color:#999999;">.</span><span style="color:#B07D48;">name</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">name</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// ok</span></span></code></pre></div><h2 id="_4-target" tabindex="-1">4. target <a class="header-anchor" href="#_4-target" aria-label="Permalink to &quot;4. target&quot;">​</a></h2><p><code>指定编译的ECMAScript目标版本</code>。枚举值：&quot;ES3&quot;， &quot;ES5&quot;， &quot;ES6&quot;/ &quot;ES2015&quot;， &quot;ES2016&quot;， &quot;ES2017&quot;，&quot;ESNext&quot;。默认值： “ES3”</p><p>TypeScript是ES6的超集，所以你可以使用ES6来编写ts代码（通常我们也的确这么做）。然而，当编译ts代码时，可以把ts转为ES5或更早的js代码。所以需要选择一个编译的目标版本。vue-cli3的typescript模板，设置为“ESNext”，因为现代大部分应用项目都会使用Webpack（Parcel也很棒）进行打包，Webpack会把你的代码转换成在所有浏览器中可运行的代码。</p><blockquote><p>target: &quot;ESNext&quot; 是指tc39最新的<a href="https://github.com/tc39/proposals" target="_blank" rel="noreferrer">ES proposed features(opens new window)</a></p></blockquote><h2 id="_5-module" tabindex="-1">5. module <a class="header-anchor" href="#_5-module" aria-label="Permalink to &quot;5. module&quot;">​</a></h2><p><code>指定生成哪个模块系统代码</code>。枚举值：&quot;None&quot;， &quot;CommonJS&quot;， &quot;AMD&quot;， &quot;System&quot;， &quot;UMD&quot;， &quot;ES6&quot;， &quot;ES2015&quot;，&quot;ESNext&quot;。默认值根据--target选项不同而不同，当target设置为ES6时，默认module为“ES6”，否则为“commonjs”</p><p>通常使用ES6的模块来写ts代码，然而2016年1月以前，基本上没有浏览器原生支持ES6的模块系统，所以需要转换为不同的模块系统，如：CommonJS、AMD、SystemJS等，而module选项就是指定编译使用对应的模块系统。</p><h2 id="_6-lib" tabindex="-1">6. lib <a class="header-anchor" href="#_6-lib" aria-label="Permalink to &quot;6. lib&quot;">​</a></h2><p><code>编译过程中需要引入的库文件的列表</code>。string[]类型，可选的值有很多，常用的有ES5，ES6，ESNext，DOM，DOM.Iterable、WebWorker、ScriptHost等。该值默认值是根据--target选项不同而不同。当target为ES5时，默认值为[&#39;DOM &#39;, &#39;ES5&#39;, &#39;ScriptHost&#39;];当target为ES6时，默认值为[&#39;DOM&#39;, &#39;ES6&#39;, &#39;DOM.Iterable&#39;, &#39;ScriptHost&#39;]</p><p>为了在ts代码中使用ES6中的类，比如Array.form、Set、Reflect等，需要设置lib选项，在编译过程中把这些标准库引入。这样在编译过程中，如果遇到属于这些标准库的class或api时，ts编译器不会报错。</p><h2 id="_7-moduleresolution" tabindex="-1">7. moduleResolution <a class="header-anchor" href="#_7-moduleresolution" aria-label="Permalink to &quot;7. moduleResolution&quot;">​</a></h2><p><code>决定如何处理模块</code>。string类型，“node”或者“classic”，默认值：“classic”。<a href="https://www.typescriptlang.org/docs/handbook/module-resolution.html" target="_blank" rel="noreferrer">官方解释(opens new window)</a></p><p>说直白点，也就是遇到import { AAA } from &#39;./aaa&#39;该如何去找对应文件模块解析。对于工程项目，笔者<strong>建议大家使用node</strong>（vue-cli3 ts模板默认设置为node策略），因为这个更符合平时我们的书写习惯以及认知（平时都是webpack打包，webpack又基于node之上）。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#dbd7caee;">// 在源文件/root/src/A.ts中import { b } from &quot;./moduleB&quot;</span></span>
<span class="line"><span style="color:#dbd7caee;">// 两种解析方式查找文件方式不同</span></span>
<span class="line"><span style="color:#dbd7caee;"></span></span>
<span class="line"><span style="color:#dbd7caee;">// classic模块解析方式</span></span>
<span class="line"><span style="color:#dbd7caee;">1. /root/src/moduleB.ts</span></span>
<span class="line"><span style="color:#dbd7caee;">2. /root/src/moduleB.d.ts</span></span>
<span class="line"><span style="color:#dbd7caee;"></span></span>
<span class="line"><span style="color:#dbd7caee;">// node模块解析方式</span></span>
<span class="line"><span style="color:#dbd7caee;">1. /root/src/moduleB.ts</span></span>
<span class="line"><span style="color:#dbd7caee;">2. /root/src/moduleB.tsx</span></span>
<span class="line"><span style="color:#dbd7caee;">3. /root/src/moduleB.d.ts</span></span>
<span class="line"><span style="color:#dbd7caee;">4. /root/src/moduleB/package.json (if it specifies a &quot;types&quot; property)</span></span>
<span class="line"><span style="color:#dbd7caee;">5. /root/src/moduleB/index.ts</span></span>
<span class="line"><span style="color:#dbd7caee;">6. /root/src/moduleB/index.tsx</span></span>
<span class="line"><span style="color:#dbd7caee;">7. /root/src/moduleB/index.d.ts</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#393a34;">// 在源文件/root/src/A.ts中import { b } from &quot;./moduleB&quot;</span></span>
<span class="line"><span style="color:#393a34;">// 两种解析方式查找文件方式不同</span></span>
<span class="line"><span style="color:#393a34;"></span></span>
<span class="line"><span style="color:#393a34;">// classic模块解析方式</span></span>
<span class="line"><span style="color:#393a34;">1. /root/src/moduleB.ts</span></span>
<span class="line"><span style="color:#393a34;">2. /root/src/moduleB.d.ts</span></span>
<span class="line"><span style="color:#393a34;"></span></span>
<span class="line"><span style="color:#393a34;">// node模块解析方式</span></span>
<span class="line"><span style="color:#393a34;">1. /root/src/moduleB.ts</span></span>
<span class="line"><span style="color:#393a34;">2. /root/src/moduleB.tsx</span></span>
<span class="line"><span style="color:#393a34;">3. /root/src/moduleB.d.ts</span></span>
<span class="line"><span style="color:#393a34;">4. /root/src/moduleB/package.json (if it specifies a &quot;types&quot; property)</span></span>
<span class="line"><span style="color:#393a34;">5. /root/src/moduleB/index.ts</span></span>
<span class="line"><span style="color:#393a34;">6. /root/src/moduleB/index.tsx</span></span>
<span class="line"><span style="color:#393a34;">7. /root/src/moduleB/index.d.ts</span></span></code></pre></div><h2 id="_8-paths" tabindex="-1">8. paths <a class="header-anchor" href="#_8-paths" aria-label="Permalink to &quot;8. paths&quot;">​</a></h2><p><code>模块名或路径映射的列表</code>。Object值</p><p>这是一个非常有用的选项，比如我们经常使用&#39;@/util/help&#39;来代替&#39;./src/util/help&#39;，省的每次在不同层级文件import模块时,都纠结于是&#39;./&#39;还是&#39;../&#39;。该选项告诉编译器遇到匹配的值时，去映射的路径下加载模块。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">baseUrl</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#DBD7CAEE;">: </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">.</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 注意：baseUrl不可少</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">paths</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#DBD7CAEE;">:</span><span style="color:#666666;"> {</span></span>
<span class="line"><span style="color:#666666;">      </span><span style="color:#758575DD;">// 映射列表</span></span>
<span class="line"><span style="color:#666666;">      </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">@/*</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">: [</span></span>
<span class="line"><span style="color:#666666;">        </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">src/*</span><span style="color:#C98A7D99;">&quot;</span></span>
<span class="line"><span style="color:#666666;">      ],</span></span>
<span class="line"><span style="color:#666666;">      </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">moduleA</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">: [</span></span>
<span class="line"><span style="color:#666666;">        </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">src/libs/moduleA</span><span style="color:#C98A7D99;">&quot;</span></span>
<span class="line"><span style="color:#666666;">      ]</span></span>
<span class="line"><span style="color:#666666;">    }</span></span>
<span class="line"><span style="color:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// in ts code</span></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">Setting</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">@/components/Setting.vue</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 模块实际位置: src/components/Setting.vue</span></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">TestModule</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">moduleA/index.js</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 模块实际位置: src/libs/moduleA/index.js</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">baseUrl</span><span style="color:#B5695999;">&quot;</span><span style="color:#393A34;">: </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">.</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 注意：baseUrl不可少</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">paths</span><span style="color:#B5695999;">&quot;</span><span style="color:#393A34;">:</span><span style="color:#999999;"> {</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// 映射列表</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">@/*</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">: [</span></span>
<span class="line"><span style="color:#999999;">        </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">src/*</span><span style="color:#B5695999;">&quot;</span></span>
<span class="line"><span style="color:#999999;">      ],</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">moduleA</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">: [</span></span>
<span class="line"><span style="color:#999999;">        </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">src/libs/moduleA</span><span style="color:#B5695999;">&quot;</span></span>
<span class="line"><span style="color:#999999;">      ]</span></span>
<span class="line"><span style="color:#999999;">    }</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// in ts code</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Setting</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">@/components/Setting.vue</span><span style="color:#B5695999;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 模块实际位置: src/components/Setting.vue</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">TestModule</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">moduleA/index.js</span><span style="color:#B5695999;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 模块实际位置: src/libs/moduleA/index.js</span></span></code></pre></div><h2 id="_9-strictnullchecks" tabindex="-1">9. strictNullChecks <a class="header-anchor" href="#_9-strictnullchecks" aria-label="Permalink to &quot;9. strictNullChecks&quot;">​</a></h2><p><code>是否启用严格的 null检查模式</code>。boolean值，默认值：false</p><p>未处理的null和undefined经常会导致BUG的产生，所以TypeScript包含了strictNullChecks选项来帮助我们减少对这种情况的担忧。当启用了strictNullChecks，null和undefined获得了它们自己各自的类型null和undefined。开启该模式有助于发现并处理可能为undefined的赋值。<strong>如果是正式项目，笔者建议开启该选项；如果只是练手TypeScirpt，可以关闭该选项</strong>，不然所有可能为null/undefined的赋值，都需要写联合类型。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;">// 未开启strictNullChecks，number类型包含了null和undefined类型</span></span>
<span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">foo</span><span style="color:#666666;">: </span><span style="color:#5DA994;">number</span><span style="color:#666666;"> =</span><span style="color:#CB7676;"> </span><span style="color:#4C9A91;">123</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#BD976A;">foo</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">null</span><span style="color:#666666;">;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// Okay</span></span>
<span class="line"><span style="color:#BD976A;">foo</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">undefined</span><span style="color:#666666;">;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// Okay</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">// 开启strictNullChecks</span></span>
<span class="line"><span style="color:#CB7676;">let </span><span style="color:#BD976A;">foo</span><span style="color:#666666;">: </span><span style="color:#5DA994;">string</span><span style="color:#666666;">[] | </span><span style="color:#CB7676;">undefined</span><span style="color:#666666;"> =</span><span style="color:#CB7676;"> </span><span style="color:#BD976A;">arr</span><span style="color:#666666;">.</span><span style="color:#80A665;">find</span><span style="color:#666666;">(</span><span style="color:#BD976A;">key</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#CB7676;"> </span><span style="color:#BD976A;">key</span><span style="color:#CB7676;"> === </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">test</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#758575DD;">// foo.push(&#39;1&#39;) // error - &#39;foo&#39; is possibly &#39;undefined&#39;</span></span>
<span class="line"><span style="color:#BD976A;">foo</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">&amp;&amp;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">foo</span><span style="color:#666666;">.</span><span style="color:#80A665;">push</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">1</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// okay</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// 未开启strictNullChecks，number类型包含了null和undefined类型</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">foo</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">number</span><span style="color:#999999;"> =</span><span style="color:#AB5959;"> </span><span style="color:#2F798A;">123</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#B07D48;">foo</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">null</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// Okay</span></span>
<span class="line"><span style="color:#B07D48;">foo</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">undefined</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// Okay</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 开启strictNullChecks</span></span>
<span class="line"><span style="color:#AB5959;">let </span><span style="color:#B07D48;">foo</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">[] | </span><span style="color:#AB5959;">undefined</span><span style="color:#999999;"> =</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">arr</span><span style="color:#999999;">.</span><span style="color:#59873A;">find</span><span style="color:#999999;">(</span><span style="color:#B07D48;">key</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">key</span><span style="color:#AB5959;"> === </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">test</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#A0ADA0;">// foo.push(&#39;1&#39;) // error - &#39;foo&#39; is possibly &#39;undefined&#39;</span></span>
<span class="line"><span style="color:#B07D48;">foo</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">&amp;&amp;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">foo</span><span style="color:#999999;">.</span><span style="color:#59873A;">push</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">1</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// okay</span></span></code></pre></div><blockquote><p>注意：启用 --strict相当于启用 --noImplicitAny, --noImplicitThis, --alwaysStrict, --strictNullChecks, --strictFunctionTypes和--strictPropertyInitialization</p></blockquote><h2 id="_10-nounusedlocals" tabindex="-1">10. noUnusedLocals <a class="header-anchor" href="#_10-nounusedlocals" aria-label="Permalink to &quot;10. noUnusedLocals&quot;">​</a></h2><p><code>有未使用的变量时，是否抛出错误</code>。boolean值，默认值： false</p><p>顾名思义，当发现变量定义但没有使用时，编译不报错。eslint的rule中也有该条，<strong>建议正式项目将该选项开启，设置为true</strong>，使得代码干净整洁。</p><h2 id="_11-nounusedparameters" tabindex="-1">11. noUnusedParameters <a class="header-anchor" href="#_11-nounusedparameters" aria-label="Permalink to &quot;11. noUnusedParameters&quot;">​</a></h2><p><code>有未使用的参数时，是否抛出错误</code>。boolean值，默认值： false</p><p><strong>建议正式项目开启该选项，设置为true</strong>，理由同上。</p><h2 id="_12-allowjs" tabindex="-1">12. allowJs <a class="header-anchor" href="#_12-allowjs" aria-label="Permalink to &quot;12. allowJs&quot;">​</a></h2><p><code>是否允许编译javascript文件</code>。boolean值，默认值：false</p><p>如果设置为true，js后缀的文件也会被typescript进行编译。</p><h2 id="_13-typeroots和types" tabindex="-1">13. typeRoots和types <a class="header-anchor" href="#_13-typeroots和types" aria-label="Permalink to &quot;13. typeRoots和types&quot;">​</a></h2><p>默认所有可见的&quot;@types&quot;包会在编译过程中被包含进来。如果指定了typeRoots，只有typeRoots下面的包才会被包含进来。如果指定了types，只有被列出来的npm包才会被包含进来。<a href="https://www.tslang.cn/docs/handbook/tsconfig-json.html#types-typeroots-and-types" target="_blank" rel="noreferrer">详细内容可看此处(opens new window)</a></p><blockquote><p>可以指定&quot;types&quot;: []来禁用自动引入@types包</p></blockquote><h2 id="_14-files、include和exclude" tabindex="-1">14. files、include和exclude <a class="header-anchor" href="#_14-files、include和exclude" aria-label="Permalink to &quot;14. files、include和exclude&quot;">​</a></h2><p><code>编译文件包含哪些文件以及排除哪些文件</code>。</p><p>未设置include时，编译器默认包含当前目录和子目录下所有的TypeScript文件（.ts, .d.ts 和 .tsx）。如果allowJs被设置成true，JS文件（.js和.jsx）也被包含进来。exclude排除那些不需要编译的文件或文件夹。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">compilerOptions</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#DBD7CAEE;">:</span><span style="color:#666666;"> {},</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">include</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#DBD7CAEE;">: </span><span style="color:#666666;">[</span></span>
<span class="line"><span style="color:#DBD7CAEE;">        </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">src/**/*</span><span style="color:#C98A7D99;">&quot;</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#666666;">],</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">exclude</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#DBD7CAEE;">: </span><span style="color:#666666;">[</span></span>
<span class="line"><span style="color:#DBD7CAEE;">        </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">node_modules</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#DBD7CAEE;">        </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">**/*.spec.ts</span><span style="color:#C98A7D99;">&quot;</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#666666;">]</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">compilerOptions</span><span style="color:#B5695999;">&quot;</span><span style="color:#393A34;">:</span><span style="color:#999999;"> {},</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">include</span><span style="color:#B5695999;">&quot;</span><span style="color:#393A34;">: </span><span style="color:#999999;">[</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">src/**/*</span><span style="color:#B5695999;">&quot;</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">],</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">exclude</span><span style="color:#B5695999;">&quot;</span><span style="color:#393A34;">: </span><span style="color:#999999;">[</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">node_modules</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">**/*.spec.ts</span><span style="color:#B5695999;">&quot;</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">]</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><h2 id="tsconfig-json全解析" tabindex="-1">tsconfig.json全解析 <a class="header-anchor" href="#tsconfig-json全解析" aria-label="Permalink to &quot;tsconfig.json全解析&quot;">​</a></h2><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">compilerOptions</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#758575DD;">/* 基本选项 */</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">target</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">es5</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 指定 ECMAScript 目标版本: &#39;ES3&#39; (default), &#39;ES5&#39;, &#39;ES2015&#39;, &#39;ES2016&#39;, &#39;ES2017&#39;, or &#39;ESNEXT&#39;（&quot;ESNext&quot;表示最新的ES语法，包括还处在stage X阶段）</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">module</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">commonjs</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 指定使用模块: &#39;commonjs&#39;, &#39;amd&#39;, &#39;system&#39;, &#39;umd&#39; or &#39;es2015&#39;</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">lib</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[],</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 指定要包含在编译中的库文件</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">allowJs</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 允许编译 javascript 文件</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">checkJs</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 报告 javascript 文件中的错误</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">jsx</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">preserve</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 指定 jsx 代码的生成: &#39;preserve&#39;, &#39;react-native&#39;, or &#39;react&#39;</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">declaration</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 生成相应的 &#39;.d.ts&#39; 文件</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">sourceMap</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 生成相应的 &#39;.map&#39; 文件</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">outFile</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">./</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 将输出文件合并为一个文件</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">outDir</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">./</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 指定输出目录</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">rootDir</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">./</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 用来控制输出目录结构 --outDir.</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">removeComments</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 删除编译后的所有的注释</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">noEmit</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 不生成输出文件</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">importHelpers</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 从 tslib 导入辅助工具函数</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">isolatedModules</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 将每个文件做为单独的模块 （与 &#39;ts.transpileModule&#39; 类似）.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#758575DD;">/* 严格的类型检查选项 */</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">strict</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 启用所有严格类型检查选项</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">noImplicitAny</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 在表达式和声明上有隐含的 any类型时报错</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">strictNullChecks</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 启用严格的 null 检查</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">noImplicitThis</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 当 this 表达式值为 any 类型的时候，生成一个错误</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">alwaysStrict</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 以严格模式检查每个模块，并在每个文件里加入 &#39;use strict&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#758575DD;">/* 额外的检查 */</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">noUnusedLocals</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 有未使用的变量时，抛出错误</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">noUnusedParameters</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 有未使用的参数时，抛出错误</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">noImplicitReturns</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 并不是所有函数里的代码都有返回值时，抛出错误</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">noFallthroughCasesInSwitch</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#758575DD;">/* 模块解析选项 */</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">moduleResolution</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">node</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 选择模块解析策略： &#39;node&#39; (Node.js) or &#39;classic&#39; (TypeScript pre-1.6)。默认是classic</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">baseUrl</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">./</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 用于解析非相对模块名称的基目录</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">paths</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{},</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 模块名到基于 baseUrl 的路径映射的列表</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">rootDirs</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[],</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 根文件夹列表，其组合内容表示项目运行时的结构内容</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">typeRoots</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[],</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 包含类型声明的文件列表</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">types</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[],</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 需要包含的类型声明文件名列表</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">allowSyntheticDefaultImports</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 允许从没有设置默认导出的模块中默认导入。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#758575DD;">/* Source Map Options */</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">sourceRoot</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">./</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 指定调试器应该找到 TypeScript 文件而不是源文件的位置</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">mapRoot</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">./</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 指定调试器应该找到映射文件而不是生成文件的位置</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">inlineSourceMap</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">inlineSources</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#758575DD;">/* 其他选项 */</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">experimentalDecorators</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 启用装饰器</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">emitDecoratorMetadata</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 为装饰器提供元数据的支持</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">strictFunctionTypes</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">false</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 禁用函数参数双向协变检查。</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">},</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#758575DD;">/* 指定编译文件或排除指定编译文件 */</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">include</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">src/**/*</span><span style="color:#C98A7D99;">&quot;</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">],</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">exclude</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">node_modules</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">**/*.spec.ts</span><span style="color:#C98A7D99;">&quot;</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">],</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">files</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">core.ts</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">sys.ts</span><span style="color:#C98A7D99;">&quot;</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">],</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#758575DD;">// 从另一个配置文件里继承配置</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">extends</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">./config/base</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#758575DD;">// 让IDE在保存文件的时候根据tsconfig.json重新生成文件</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#B8A965;">compileOnSave</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">true</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 支持这个特性需要Visual Studio 2015， TypeScript1.8.4以上并且安装atom-typescript插件</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">compilerOptions</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A0ADA0;">/* 基本选项 */</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">target</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">es5</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 指定 ECMAScript 目标版本: &#39;ES3&#39; (default), &#39;ES5&#39;, &#39;ES2015&#39;, &#39;ES2016&#39;, &#39;ES2017&#39;, or &#39;ESNEXT&#39;（&quot;ESNext&quot;表示最新的ES语法，包括还处在stage X阶段）</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">module</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">commonjs</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 指定使用模块: &#39;commonjs&#39;, &#39;amd&#39;, &#39;system&#39;, &#39;umd&#39; or &#39;es2015&#39;</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">lib</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[],</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 指定要包含在编译中的库文件</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">allowJs</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 允许编译 javascript 文件</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">checkJs</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 报告 javascript 文件中的错误</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">jsx</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">preserve</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 指定 jsx 代码的生成: &#39;preserve&#39;, &#39;react-native&#39;, or &#39;react&#39;</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">declaration</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 生成相应的 &#39;.d.ts&#39; 文件</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">sourceMap</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 生成相应的 &#39;.map&#39; 文件</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">outFile</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">./</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 将输出文件合并为一个文件</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">outDir</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">./</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 指定输出目录</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">rootDir</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">./</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 用来控制输出目录结构 --outDir.</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">removeComments</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 删除编译后的所有的注释</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">noEmit</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 不生成输出文件</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">importHelpers</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 从 tslib 导入辅助工具函数</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">isolatedModules</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 将每个文件做为单独的模块 （与 &#39;ts.transpileModule&#39; 类似）.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A0ADA0;">/* 严格的类型检查选项 */</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">strict</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 启用所有严格类型检查选项</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">noImplicitAny</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 在表达式和声明上有隐含的 any类型时报错</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">strictNullChecks</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 启用严格的 null 检查</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">noImplicitThis</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 当 this 表达式值为 any 类型的时候，生成一个错误</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">alwaysStrict</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 以严格模式检查每个模块，并在每个文件里加入 &#39;use strict&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A0ADA0;">/* 额外的检查 */</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">noUnusedLocals</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 有未使用的变量时，抛出错误</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">noUnusedParameters</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 有未使用的参数时，抛出错误</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">noImplicitReturns</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 并不是所有函数里的代码都有返回值时，抛出错误</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">noFallthroughCasesInSwitch</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A0ADA0;">/* 模块解析选项 */</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">moduleResolution</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">node</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 选择模块解析策略： &#39;node&#39; (Node.js) or &#39;classic&#39; (TypeScript pre-1.6)。默认是classic</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">baseUrl</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">./</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 用于解析非相对模块名称的基目录</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">paths</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{},</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 模块名到基于 baseUrl 的路径映射的列表</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">rootDirs</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[],</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 根文件夹列表，其组合内容表示项目运行时的结构内容</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">typeRoots</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[],</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 包含类型声明的文件列表</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">types</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[],</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 需要包含的类型声明文件名列表</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">allowSyntheticDefaultImports</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 允许从没有设置默认导出的模块中默认导入。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A0ADA0;">/* Source Map Options */</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">sourceRoot</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">./</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 指定调试器应该找到 TypeScript 文件而不是源文件的位置</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">mapRoot</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">./</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 指定调试器应该找到映射文件而不是生成文件的位置</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">inlineSourceMap</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">inlineSources</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A0ADA0;">/* 其他选项 */</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">experimentalDecorators</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 启用装饰器</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">emitDecoratorMetadata</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 为装饰器提供元数据的支持</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">strictFunctionTypes</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">false</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 禁用函数参数双向协变检查。</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">},</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">/* 指定编译文件或排除指定编译文件 */</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">include</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">src/**/*</span><span style="color:#B5695999;">&quot;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">],</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">exclude</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">node_modules</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">**/*.spec.ts</span><span style="color:#B5695999;">&quot;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">],</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">files</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">core.ts</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">sys.ts</span><span style="color:#B5695999;">&quot;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">],</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">// 从另一个配置文件里继承配置</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">extends</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">./config/base</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">// 让IDE在保存文件的时候根据tsconfig.json重新生成文件</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B5695999;">&quot;</span><span style="color:#998418;">compileOnSave</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 支持这个特性需要Visual Studio 2015， TypeScript1.8.4以上并且安装atom-typescript插件</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div>`,58),e=[p];function t(c,r,y,A,D,i){return n(),a("div",null,e)}const E=s(l,[["render",t]]);export{B as __pageData,E as default};
